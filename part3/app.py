# -- coding: utf-8 --
import streamlit as st
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from scipy.spatial import ConvexHull
import re
import pandas as pd
import json
import requests
from io import BytesIO

# --- Configuration de la page Streamlit et Design ---
st.set_page_config(
    page_title="‚ú® Visualiseur Dynamique d'Espaces d'Acceptabilit√©",
    page_icon="üß†",
    layout="wide"
)

# --- Fonctions de Calcul (C≈ìur du projet) ---

@st.cache_data
def calculate_h_categorizer(A, R, w, epsilon=1e-5):
    """Impl√©mente la s√©mantique h-categorizer pond√©r√©e avec contr√¥le de convergence."""
    n = len(A)
    arg_to_idx = {arg: i for i, arg in enumerate(A)}
    attackers = [[] for _ in range(n)]
    for attacker, attacked in R:
        if attacker in arg_to_idx and attacked in arg_to_idx:
            attackers[arg_to_idx[attacked]].append(arg_to_idx[attacker])
    
    # 1. Initialisation
    hc_k = np.zeros(n)
    
    # 2. It√©ration
    for _ in range(500): # Limite de 500 it√©rations
        # Calcule la somme des attaquants pour chaque argument
        sum_attackers_hc = np.array([np.sum(hc_k[att]) for att in attackers])
        
        # Formule de mise √† jour: hc_{k+1}(a) = w(a) / (1 + sum_{b -> a} hc_k(b))
        hc_k_plus_1 = w / (1 + sum_attackers_hc)
        
        # V√©rification de la convergence
        if np.max(np.abs(hc_k_plus_1 - hc_k)) < epsilon:
            return hc_k_plus_1
        
        hc_k = hc_k_plus_1
        
    return hc_k_plus_1 # Retourne le r√©sultat apr√®s le nombre max d'it√©rations


@st.cache_data
def compute_acceptability_space(A, R, num_samples):
    """Approxime l'espace d'acceptabilit√© (Monte Carlo) et construit l'enveloppe convexe."""
    n = len(A)
    if n == 0:
        return np.array([]), None
        
    acceptability_points = []
    # G√©n√©ration de tous les poids en une seule fois
    random_weights = np.random.rand(num_samples, n)
    
    progress_bar = st.progress(0, text=f"Calcul de {num_samples} points d'acceptabilit√©...")
    for i, w in enumerate(random_weights):
        x_i = calculate_h_categorizer(A, R, w)
        acceptability_points.append(x_i)
        if (i + 1) % 500 == 0:
            progress_bar.progress((i + 1) / num_samples, text=f"Calcul en cours... {i+1}/{num_samples} points")

    progress_bar.empty()
    points = np.array(acceptability_points)
    
    hull = None
    # L'enveloppe convexe n√©cessite au moins n+1 points pour un espace de dimension n
    if n > 1 and len(points) > n:
        try:
            hull = ConvexHull(points)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Impossible de construire l'enveloppe convexe. Erreur: {e}")
            
    return points, hull

# --- Fonction de Visualisation (Utilise Plotly pour l'interactivit√©) ---

def visualize_space(A, points, hull, n):
    """G√®re l'affichage des graphiques selon la dimension (n)."""
    
    # Couleurs am√©lior√©es
    colors = {
        'primary': '#6366F1',  # Violet moderne
        'secondary': '#10B981', # Vert √©meraude
        'accent': '#F59E0B',   # Orange ambre
        'segment': '#8B5CF6',  # Violet vif
        'scatter': '#3B82F6',  # Bleu
        'hull': '#EF4444'      


    }
    
    # Cas n=1 : Segment (Utilise Matplotlib pour la simplicit√© du segment 1D)
    if n == 1:
        st.subheader(f"Segment d'acceptabilit√© pour l'argument '{A[0]}'")
        min_val, max_val = np.min(points), np.max(points)
        
        # Utilisation de Plotly pour le segment 1D aussi pour uniformit√©
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=[min_val, max_val], y=[0, 0],
            mode='lines',
            line=dict(color=colors['segment'], width=8),
            name='Segment'
        ))
        fig.update_layout(
            title=f"Espace d'Acceptabilit√© 1D (Intervalle: [{min_val:.3f}, {max_val:.3f}])",
            xaxis_title=f"Degr√© d'acceptabilit√© de '{A[0]}'",
            yaxis_visible=False,
            height=200,
            plot_bgcolor='rgba(0,0,0,0)'
        )
        st.plotly_chart(fig, use_container_width=True)

    # Cas n=2 : Plot 2D (Utilise Plotly pour le zoom)
    elif n == 2:
        st.subheader("Enveloppe Convexe 2D")
        
        df = pd.DataFrame(points, columns=[A[0], A[1]])
        
        fig = px.scatter(
            df, 
            x=A[0], 
            y=A[1], 
            opacity=0.4,
            color_discrete_sequence=[colors['scatter']],
            title="Points √©chantillonn√©s et Enveloppe Convexe 2D",
            labels={'x': f"Acceptabilit√© de '{A[0]}'", 'y': f"Acceptabilit√© de '{A[1]}'"}
        )
        
        if hull:
            # Ajouter le contour de l'enveloppe convexe (Simplices sont des ar√™tes en 2D)
            for simplex in hull.simplices:
                fig.add_trace(go.Scatter(
                    x=points[simplex, 0], 
                    y=points[simplex, 1], 
                    mode='lines', 
                    line=dict(color=colors['primary'], width=3), 
                    name='Contour'
                ))
        
        fig.update_layout(
            xaxis_range=[0, 1], 
            yaxis_range=[0, 1], 
            showlegend=False,
            height=600,
            plot_bgcolor='rgba(240,240,240,0.1)'
        )
        st.plotly_chart(fig, use_container_width=True)

    # Cas n=3 : Plot 3D interactif (Utilise Plotly pour la rotation)
    elif n == 3:
        st.subheader("Enveloppe Convexe 3D (Interactive)")
        
        if hull:
            fig_3d = go.Figure(data=[
                go.Mesh3d(
                    x=points[:, 0], y=points[:, 1], z=points[:, 2],
                    i=hull.simplices[:, 0], j=hull.simplices[:, 1], k=hull.simplices[:, 2],
                    opacity=0.7,
                    color=colors['primary'],
                    name='Enveloppe Convexe'
                )
            ])
        else:
            fig_3d = px.scatter_3d(
                x=points[:, 0], y=points[:, 1], z=points[:, 2],
                opacity=0.6,
                color_discrete_sequence=[colors['secondary']],
                title="Points √©chantillonn√©s 3D"
            )
            
        fig_3d.update_layout(
            scene=dict(
                xaxis_title=A[0], yaxis_title=A[1], zaxis_title=A[2],
                xaxis=dict(range=[0, 1]), yaxis=dict(range=[0, 1]), zaxis=dict(range=[0, 1]),
                aspectmode='cube'
            ),
            title=f"Espace d'Acceptabilit√© 3D - Axes: {A[0]}, {A[1]}, {A[2]}",
            height=700
        )
        st.plotly_chart(fig_3d, use_container_width=True)

    # Cas n > 3 : Tranche 3D interactive (Projection)
    elif n > 3:
        st.subheader("Tranche 3D Interactive (Projection de l'Espace √† N Dimensions)")
        st.info("üí° Pour |A| > 3, on affiche la projection 3D en fixant les autres dimensions.")
        
        # S√©lecteurs pour les axes √† afficher
        cols = st.columns(3)
        with cols[0]:
            x_axis_idx = st.selectbox("Axe X", options=range(n), format_func=lambda i: A[i], index=0)
        with cols[1]:
            y_axis_idx = st.selectbox("Axe Y", options=range(n), format_func=lambda i: A[i], index=1)
        with cols[2]:
            z_axis_idx = st.selectbox("Axe Z", options=range(n), format_func=lambda i: A[i], index=2)
        
        axes_to_plot = [x_axis_idx, y_axis_idx, z_axis_idx]
        
        # Sliders pour les autres dimensions (Dimensions fixes)
        fixed_axes_indices = [i for i in range(n) if i not in axes_to_plot]
        fixed_values = {}
        
        if fixed_axes_indices:
            st.markdown("##### ‚öôÔ∏è Contr√¥les des Dimensions Fixes")
            
            # Utilisation du caching pour ne pas perdre la valeur du slider entre les relancements
            if 'tolerance' not in st.session_state:
                st.session_state.tolerance = 0.05
            
            tolerance = st.slider("Tol√©rance de la 'tranche' (¬± valeur fix√©e)", 0.01, 0.5, st.session_state.tolerance, key='tolerance_slider')
            
            # Cr√©ation de la mask de s√©lection
            mask = np.full(points.shape[0], True)
            
            for i in fixed_axes_indices:
                if f'fixed_value_{i}' not in st.session_state:
                    st.session_state[f'fixed_value_{i}'] = 0.5
                    
                fixed_val = st.slider(
                    f"Valeur Fixe pour '{A[i]}' **({i+1})**", 
                    0.0, 1.0, 
                    st.session_state[f'fixed_value_{i}'], 
                    0.01,
                    key=f'fixed_value_slider_{i}'
                )
                fixed_values[i] = fixed_val
                
                # Appliquer le masquage pour la tranche
                mask &= (np.abs(points[:, i] - fixed_val) < tolerance)
                
            sliced_points = points[mask]
        else:
            sliced_points = points

        # Affichage du Plotly 3D pour la tranche
        if sliced_points.shape[0] == 0:
            st.warning("Aucun point trouv√© dans la tranche. Essayez d'augmenter la tol√©rance.")
        else:
            fig_slice = px.scatter_3d(
                x=sliced_points[:, axes_to_plot[0]],
                y=sliced_points[:, axes_to_plot[1]],
                z=sliced_points[:, axes_to_plot[2]],
                title=f"Tranche 3D de l'Espace ({len(sliced_points)} points affich√©s)",
                labels={
                    'x': A[axes_to_plot[0]], 
                    'y': A[axes_to_plot[1]], 
                    'z': A[axes_to_plot[2]]
                },
                opacity=0.6,
                color_discrete_sequence=[colors['accent']]
            )
            fig_slice.update_layout(
                scene=dict(
                    xaxis=dict(range=[0, 1]), yaxis=dict(range=[0, 1]), zaxis=dict(range=[0, 1]),
                    aspectmode='cube'
                ),
                height=700
            )
            st.plotly_chart(fig_slice, use_container_width=True)

# --- Interface Utilisateur Principale (avec Onglets) ---

st.title("üß† Visualiseur Dynamique des Espaces d'Acceptabilit√©")
st.write("""
Cette application impl√©mente et visualise la s√©mantique **h-categorizer pond√©r√©e** ($\\Sigma_{\\mathrm{HC}}$) pour l'argumentation graduelle, 
en utilisant une m√©thode d'√©chantillonnage Monte Carlo pour approximer l'espace d'acceptabilit√©.
""")

# --- Barre Lat√©rale (Design et Documentation) ---
st.sidebar.header("Configuration du Graphe")

# Lien vers le Notebook de Documentation
st.sidebar.markdown("---")
st.sidebar.markdown("### üìÑ Documentation D√©taill√©e")

# D√©finition du graphe par l'utilisateur
default_args = "a, b, c, d"
default_attacks = "a -> b\nb -> c\nc -> a\na -> d"

args_input = st.sidebar.text_area("1. Liste des arguments (s√©par√©s par des virgules)", value=default_args, key='args_input')
attacks_input = st.sidebar.text_area("2. Liste des attaques (une par ligne, format: attaquant -> attaque)", value=default_attacks, key='attacks_input')

# Parsing des entr√©es utilisateur
A = sorted([arg.strip() for arg in args_input.split(',') if arg.strip()])
R = []
for line in attacks_input.split('\n'):
    match = re.match(r'(\w+)\s*->\s*(\w+)', line.strip())
    if match:
        attacker, attacked = match.groups()
        if attacker in A and attacked in A:
            R.append((attacker, attacked))

st.sidebar.markdown(f"*Arguments d√©tect√©s* : **{len(A)}**")
st.sidebar.markdown(f"*Attaques d√©tect√©es* : **{len(R)}**")

num_samples = st.sidebar.slider(
    "3. Nombre de points √† √©chantillonner",
    min_value=1000,
    max_value=150000, # Augment√© pour l'excellence
    value=50000,
    step=1000,
    help="Plus le nombre est √©lev√©, plus l'approximation de l'espace est pr√©cise, mais le calcul est long.",
    key='num_samples_slider'
)

# --- Contenu des Onglets ---
tab_main, tab_notebook = st.tabs(["üöÄ Configuration & R√©sultats", "üìö Notebook"])

with tab_main:
    st.header("Configuration et Visualisation")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("üìã Configuration")
        st.markdown(f"""
        **Param√®tres actuels :**
        - Nombre d'Arguments $|A|$ : **{len(A)}**
        - Nombre de Points √âchantillonn√©s : **{num_samples}**
        """)
        
        if st.button("‚ú® Lancer le Calcul", type="primary", use_container_width=True):
            st.session_state.run_visualization = True
    
    # Affichage automatique des r√©sultats si le calcul a √©t√© lanc√©
    if 'run_visualization' in st.session_state and st.session_state.run_visualization:
        n = len(A)
        if n == 0:
            st.error("Veuillez d√©finir au moins un argument dans la barre lat√©rale.")
        else:
            with st.spinner(f"Calcul de l'espace pour {n} arguments avec {num_samples} points..."):
                points, hull = compute_acceptability_space(A, R, num_samples)
            
            with col2:
                st.subheader("üìä R√©sultats")
                st.success("‚úÖ Calcul termin√© avec succ√®s !")
                visualize_space(A, points, hull, n)
                
                if hull:
                    st.info(f"üìä R√©sultats : {len(points)} points g√©n√©r√©s. Enveloppe Convexe construite avec {len(hull.simplices)} simplexes.")
                elif len(points) > 0:
                    st.info(f"üìä R√©sultats : {len(points)} points g√©n√©r√©s. L'enveloppe convexe n'a pas √©t√© construite (voir avertissement).")
    else:
        with col2:
            st.info("üëÜ Configurez votre graphe dans la barre lat√©rale et cliquez sur 'Lancer le Calcul' pour voir les r√©sultats ici.")

with tab_notebook:
    st.markdown("""
    ## üìö Cahier de R√©ponse D√©taill√© : Espaces d'Acceptabilit√© pour la S√©mantique Graduelle

    Ce document pr√©sente l'impl√©mentation et l'analyse de la s√©mantique h-categorizer pond√©r√©e ($\\Sigma_{HC}$), 
    ainsi qu'une m√©thode d'approximation et de visualisation de l'espace des degr√©s d'acceptabilit√© pour un syst√®me d'argumentation donn√©.
    """)
    
    # --- Question 1 ---
    st.markdown("""
    ## 1. Impl√©mentation de la S√©mantique H-Categorizer Pond√©r√©e ($\\Sigma_{HC}$) (Question 1)

    La s√©mantique h-categorizer ($\\Sigma_{HC}$) pour un Framework d'Argumentation Pond√©r√© ($\\mathcal{F}=(A,R,w)$) est d√©finie par une s√©quence de fonctions $hc_k : A \\to [0,1]$ donn√©e par la formule r√©cursive :

    $$
    \\forall a \\in A, \\quad hc_{k+1}(a) = \\frac{w(a)}{1 + \\sum_{b \\to a} hc_k(b)}
    $$

    O√π $w(a) \\in [0,1]$ est le poids de l'argument $a$, et la somme est effectu√©e sur tous les attaquants $b$ de $a$.
    """)
    
    with st.expander("üî¨ **Code d'Impl√©mentation et Analyse de la Convergence**"):
        st.markdown("""
        **Impl√©mentation de la fonction calculate_h_categorizer :**
        ```python
        def calculate_h_categorizer(A, R, w, epsilon=1e-5, max_iter=500):
            n = len(A)
            arg_to_idx = {arg: i for i, arg in enumerate(A)}
            attackers = [[] for _ in range(n)]
            
            # Pr√©traitement des attaques pour un acc√®s rapide
            for attacker, attacked in R:
                if attacker in arg_to_idx and attacked in arg_to_idx:
                    attackers[arg_to_idx[attacked]].append(arg_to_idx[attacker])
            
            hc_k = np.zeros(n)
            
            for k in range(max_iter):
                # Calcul des sommes d'attaquants pour chaque argument
                sum_attackers_hc = np.array([np.sum(hc_k[att]) for att in attackers])
                
                # Application de la formule du h-categorizer
                hc_k_plus_1 = w / (1 + sum_attackers_hc)
                
                # V√©rification de la convergence
                if np.max(np.abs(hc_k_plus_1 - hc_k)) < epsilon:
                    return hc_k_plus_1
                
                hc_k = hc_k_plus_1
                
            return hc_k_plus_1
        ```
        
        **Analyse de la convergence :** La s√©mantique $\\Sigma_{HC}$ est garantie de converger en raison de la nature non expansive de sa fonction de mise √† jour (elle est une contraction sur l'espace $[0,1]^n$). La boucle impl√©ment√©e s'arr√™te lorsque la diff√©rence maximale entre les valeurs d'acceptabilit√© de l'it√©ration $k$ et $k+1$ devient inf√©rieure au seuil $\\epsilon$, ou si le nombre maximal d'it√©rations est atteint.
        """)
    
    # --- Question 2 ---
    st.markdown("""
    ## 2. Approximation de l'Espace d'Acceptabilit√© (Question 2)

    L'espace des degr√©s d'acceptabilit√© est l'ensemble $S_{\\Sigma_{HC}}(\\mathcal{F}) = \\{\\Sigma_{HC}(A,R,w) \\mid w \\in [0,1]^{|A|}\\}$. Cet espace est un sous-ensemble convexe (bien que non n√©cessairement poly√©drique) de $[0,1]^{|A|}$.

    Nous utilisons une m√©thode Monte Carlo pour approximer cet espace, en √©chantillonnant un grand nombre de vecteurs de poids al√©atoires ($w_i$) et en calculant les vecteurs d'acceptabilit√© correspondants ($x_i$).
    """)
    
    with st.expander("üîß **Code d'Approximation et Construction de l'Enveloppe Convexe**"):
        st.markdown("""
        **Fonction compute_acceptability_space :**
        ```python
        def compute_acceptability_space(A, R, num_samples):
            n = len(A)
            if n == 0:
                return np.array([]), None
                
            acceptability_points = []
            
            # √âchantillonnage des vecteurs w_i
            random_weights = np.random.rand(num_samples, n)
            
            # Calcul des x_i correspondants
            for w in random_weights:
                x_i = calculate_h_categorizer(A, R, w)
                acceptability_points.append(x_i)

            points = np.array(acceptability_points)
            
            # Construction de l'Enveloppe Convexe
            hull = None
            if n > 1 and len(points) > n:
                try:
                    hull = ConvexHull(points)
                except Exception as e:
                    print(f"ATTENTION: Impossible de construire l'enveloppe convexe. Erreur: {e}")
                    
            return points, hull
        ```
        
        **Justification :** L'approximation par l'Enveloppe Convexe est pertinente car, en raison de la nature continue et de la convexit√© de l'espace $S_{\\Sigma_{HC}}(\\mathcal{F})$, les points g√©n√©r√©s sont distribu√©s √† l'int√©rieur (et sur la fronti√®re) de cet espace. L'enveloppe convexe des points √©chantillonn√©s offre donc une excellente approximation poly√©drique de l'espace r√©el.
        """)
    
    # --- Question 3 ---
    st.markdown("""
    ## 3. Visualisation de l'Enveloppe Convexe (Question 3)

    La visualisation s'adapte √† la dimension de l'espace ($|A|=n$). Les visualisations utilisent Plotly pour garantir l'interactivit√©.
    """)
    
    with st.expander("üé® **Strat√©gies de Visualisation par Dimension**"):
        st.markdown("""
        - **$|A| = 1$** : Affichage d'un segment repr√©sentant l'intervalle des degr√©s d'acceptabilit√© possibles
        - **$|A| = 2$** : Graphique 2D avec nuage de points et enveloppe convexe
        - **$|A| = 3$** : Visualisation 3D interactive avec mesh de l'enveloppe convexe
        - **$|A| > 3$** : Tranche 3D avec s√©lection des axes et contr√¥le des dimensions fixes via sliders
        """)
    
   # --- Exemples avec Images ---
    st.markdown("""
    ## üß™ Exemples et R√©sultats

    Voici quelques exemples de graphes test√©s avec leurs visualisations correspondantes :
    """)
    
    with st.expander("üìä **Exemples de Graphes Test√©s avec R√©sultats**"):
        st.markdown("""
        ### **Cycle √† 3 arguments :**
        - $A = \\{a, b, c\\}$
        - $R = \\{a \\to b, b \\to c, c \\to a\\}$
        - **R√©sultat :** Un espace 3D avec une structure sym√©trique caract√©ristique des cycles
        """)
        
        # M√©thode 1 : Charger l'image locale
        try:
            st.image("A=3.png", caption="Visualisation 3D - Cycle √† 3 arguments", use_column_width=True)
        except:
            st.warning("Image A=3.png non trouv√©e. Assurez-vous qu'elle est dans le m√™me dossier que l'application.")
        
        st.markdown("---")
        
        st.markdown("""
        ### **Graphe simple √† 2 arguments :**
        - $A = \\{a, b\\}$
        - $R = \\{a \\to b\\}$
        - **R√©sultat :** Un espace 2D montrant la relation entre les degr√©s d'acceptabilit√© des deux arguments
        """)
        
        try:
            st.image("A=2.png", caption="Visualisation 2D - Graphe √† 2 arguments", use_column_width=True)
        except:
            st.warning("Image A=2.png non trouv√©e")
        
        st.markdown("---")
        
        st.markdown("""
        ### **Graphe √† 4 arguments :**
        - $A = \\{a, b, c, d\\}$
        - $R = \\{a \\to b, b \\to c, c \\to d, d \\to a\\}$
        - **R√©sultat :** Visualisation par tranches 3D de l'espace √† 4 dimensions
        """)
        
        try:
            st.image("A=4.png", caption="Visualisation 3D - Graphe √† 4 arguments", use_column_width=True)
        except:
            st.warning("Image A=4.png non trouv√©e")
    
    # --- T√©l√©chargement du vrai notebook Colab ---
    st.markdown("---")
    
    st.markdown("### üì• T√©l√©charger le Notebook Complet")
    
    # Lien direct vers le notebook Colab
    colab_url = "https://colab.research.google.com/drive/1_vA9JZc7E6zs__OXmji7Sq4Bz-8KI_IF?usp=sharing"
    
    st.markdown(f"""
    <div style='border: 2px solid #6366F1; border-radius: 10px; padding: 20px; background-color: #f8f9fa;'>
        <h4 style='color: #6366F1;'>üìñ Notebook Colab Complet</h4>
        <p>Acc√©dez au notebook complet contenant tous les codes, analyses et visualisations :</p>
        <a href='{colab_url}' target='_blank' style='display: inline-block; padding: 10px 20px; background-color: #6366F1; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0;'>
            üîó Ouvrir dans Google Colab
        </a>
    </div>
    """, unsafe_allow_html=True)
    
    # Bouton de t√©l√©chargement alternatif
    st.download_button(
        label="üì• T√©l√©charger le Notebook (.ipynb)",
        data="",  # Vous pouvez ajouter le contenu r√©el du notebook ici si disponible
        file_name="cahier_reponse_espaces_acceptabilite.ipynb",
        mime="application/x-ipynb+json",
        type="primary",
        use_container_width=True,
        disabled=True,  # D√©sactiv√© car nous utilisons le lien Colab
        help="Le notebook complet est disponible via le lien Google Colab ci-dessus"
    )

# Initialisation de l'√©tat de session
if 'run_visualization' not in st.session_state:
    st.session_state.run_visualization = False